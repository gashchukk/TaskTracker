#!/usr/local/bin/ python3.12

import argparse
import datetime
import sqlite3
from tabulate import tabulate

def add_task():
    current_time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    cur.execute(f"INSERT INTO tasks (description, status, time_created, time_updated) VALUES (?, ?, ?, ?)",
                (args.description, 'todo', current_time, current_time))

    con.commit()

    cur.execute("SELECT * FROM tasks")
    rows = cur.fetchall()

    print(tabulate(rows, headers=['ID', 'Description', 'Status', 'Time Created', 'Time Updated'], tablefmt='grid'))

def remove_task(id):
    cur.execute("DELETE FROM tasks WHERE id = ?", (id,))
    con.commit()

    cur.execute("SELECT * FROM tasks")
    rows = cur.fetchall()

    print(tabulate(rows, headers=['ID', 'Description', 'Status', 'Time Created', 'Time Updated'], tablefmt='grid'))

def update_task(description, id):
    time_updated = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    cur.execute("UPDATE tasks SET description = ?, time_updated = ? WHERE id = ?",
                (description, time_updated, id))
    con.commit()

    cur.execute("SELECT * FROM tasks")
    rows = cur.fetchall()

    print(tabulate(rows, headers=['ID', 'Description', 'Status', 'Time Created', 'Time Updated'], tablefmt='grid'))
def mark_in_progress_func(id):
    time_updated = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    cur.execute("UPDATE tasks SET status = ?, time_updated = ? WHERE id = ?",
                ('in-progress', time_updated, id))
    con.commit()

    cur.execute("SELECT * FROM tasks")
    rows = cur.fetchall()

    print(tabulate(rows, headers=['ID', 'Description', 'Status', 'Time Created', 'Time Updated'], tablefmt='grid'))

def mark_done_func(id):
    time_updated = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    cur.execute("UPDATE tasks SET status = ?, time_updated = ? WHERE id = ?",
                ('done', time_updated, id))
    con.commit()

    cur.execute("SELECT * FROM tasks")
    rows = cur.fetchall()

    print(tabulate(rows, headers=['ID', 'Description', 'Status', 'Time Created', 'Time Updated'], tablefmt='grid'))
def list_all():
    cur.execute("SELECT * FROM tasks")
    rows = cur.fetchall()

    print(tabulate(rows, headers=['ID', 'Description', 'Status', 'Time Created', 'Time Updated'], tablefmt='grid'))

def list(status):
    cur.execute("SELECT * FROM tasks where status = ?", (status,))
    rows = cur.fetchall()

    print(tabulate(rows, headers=['ID', 'Description', 'Status', 'Time Created', 'Time Updated'], tablefmt='grid'))


parser = argparse.ArgumentParser()
subparsers = parser.add_subparsers(dest='action')


add_parser = subparsers.add_parser('add')
add_parser.add_argument('description')

delete_parser = subparsers.add_parser('delete')
delete_parser.add_argument('id', type=int)

update_parser = subparsers.add_parser('update')
update_parser.add_argument('id', type=int)
update_parser.add_argument('description')

mark_in_progress = subparsers.add_parser('mark-in-progress')
mark_in_progress.add_argument('id', type=int)

mark_done = subparsers.add_parser('mark-done')
mark_done.add_argument('id', type=int)

list_parser = subparsers.add_parser('list')
list_parser.add_argument('status', nargs='?',default=None, choices=['done', 'todo', 'in-progress'])

args = parser.parse_args()

# Connect to the database
con = sqlite3.connect("tracker.db")
cur = con.cursor()

cur.execute('''
CREATE TABLE IF NOT EXISTS tasks(
    id INTEGER PRIMARY KEY AUTOINCREMENT,    
    description TEXT NOT NULL,
    status TEXT,
    time_created TIME,
    time_updated TIME)
''')

if args.action == "add":
     add_task()
elif args.action == "delete":
     remove_task(args.id)
elif args.action == "update":
     update_task(args.description, args.id)
elif args.action == "mark-in-progress":
     mark_in_progress_func(args.id)
elif args.action == "mark-done":
     mark_done_func(args.id)
elif args.action == "list":
    if args.status:
        list(args.status)
    else:
        list_all()
con.close()